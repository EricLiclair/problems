// This is template generated by CPCLI [https://github.com/ericliclair/cpcli]
// problem link [https://leetcode.com/problems/find-the-duplicate-number/]

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

class Solution
{

private:
    // O(N) O(1): with array modification
    int _findDuplicate(vi &nums)
    {
        for (const int &n : nums)
        {
            if (nums[abs(n)] < 0)
                return abs(n);
            else
            {
                nums[abs(n)] *= -1;
            }
        }
        return -1;
    }

public:
    int findDuplicate(vector<int> &nums)
    {
        // floyds cycle detection method
        int fast = nums[0];
        int slow = nums[0];

        do
        {
            fast = nums[nums[fast]];
            slow = nums[slow];
        } while (fast != slow);

        fast = nums[0];

        while (fast != slow)
        {
            fast = nums[fast];
            slow = nums[slow];
        }

        return slow;
    }
};

int main()
{
    cout << "Hey champ!";

    // other approaches:
    // 1. sort and check for two consecutive equal numbers O(NlogN) O(1)
    // 2. store the count of occurences of each number O(N) O(N)

    return 0;
}