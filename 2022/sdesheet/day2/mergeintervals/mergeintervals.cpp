// This is template generated by CPCLI [https://github.com/ericliclair/cpcli]
// problem link [https://leetcode.com/problems/merge-intervals/]

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

class Interval
{
    int start;
    int end;

public:
    // constructor
    Interval(int _start, int _end)
    {
        this->start = _start;
        this->end = _end;
    }

    Interval(vi itr)
    {
        this->start = itr[0];
        this->end = itr[1];
    }

    // checks or overlapping intervals
    bool operator==(const Interval &obj)
    {
        // considering obj is towards right
        // check non overlapping: return converse of it
        return !(obj.start > this->end);
    }

    Interval operator+(const Interval &obj)
    {
        Interval res = Interval(min(this->start, obj.start), max(this->end, obj.end));
        return res;
    }

    vi interval()
    {
        vi _interval = {this->start, this->end};
        return _interval;
    }
};


class Solution
{
public:
    vector<vector<int>> merge(vector<vector<int>> &intervals)
    {
        vvi res;
        sort(intervals.begin(), intervals.end());

        int i = 0;
        while (i < intervals.size())
        {
            Interval current = Interval(intervals[i]);
            int idx = i + 1;
            while (idx < intervals.size() && current == Interval(intervals[idx]))
            {
                current = current + Interval(intervals[idx]);
                idx++;
            }
            res.push_back(current.interval());
            i = idx;
        }
        return res;
    }
};


int main()
{
    return 0;
}