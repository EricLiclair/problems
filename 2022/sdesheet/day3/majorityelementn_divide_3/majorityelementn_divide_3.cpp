// This is template generated by CPCLI [https://github.com/ericliclair/cpcli]
// problem link [https://leetcode.com/problems/majority-element-ii/]

// Boyre Moore's algorithm ++

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

class Candidate
{

public:
    int count = 0;
    int id = -1;
    Candidate(int _count, int _id)
    {
        this->count = _count;
        this->id = _id;
    }
};

class Solution
{
public:
    vector<int> majorityElement(vector<int> &nums)
    {
        int threshold = nums.size() / 3;
        Candidate c1 = Candidate(0, -1);
        Candidate c2 = Candidate(1, -1);

        for (const int &n : nums)
        {
            if (n == c1.id)
            {
                c1.count += 1;
            }
            else if (n == c2.id)
            {
                c2.count += 1;
            }
            else if (c1.count == 0)
            {
                c1.id = n;
                c1.count = 1;
            }
            else if (c2.count == 0)
            {
                c2.id = n;
                c2.count = 1;
            }

            else
            {
                c1.count--;
                c2.count--;
            }
        }

        vi res;
        for (const Candidate &c : {c1, c2})
        {
            if (count(nums.begin(), nums.end(), c.id) > threshold)
                res.push_back(c.id);
        }
        return res;
    }
};

int main()
{
    vi a = {4, 4, 3, 4, 2, 3, 2, 4, 2, 2};
    for (const int &n : Solution().majorityElement(a))
        cout << n << " ";
    return 0;
}