// This is template generated by CPCLI [https://github.com/ericliclair/cpcli]
// problem link [https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1]

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

class Solution
{
public:
    int maxLen(vector<int> &nums, int n)
    {
        map<int, int> store;
        store[0] = -1;

        int maxLength = 0;
        int sum = 0;

        for (int i = 0; i < n; i++)
        {
            sum += nums[i];
            if (store.find(sum) != store.end())
            {
                // a previous sum exists
                // length = i - store[sum]
                maxLength = max(maxLength, i - store[sum]);
            }
            else
            {
                store[sum] = i;
            }
        }

        return maxLength;
    }
};

int main()
{
    vi a = {-1, -2, -2, 5};
    cout << Solution().maxLen(a, a.size()) << endl;
    return 0;
}