// This is template generated by CPCLI [https://github.com/ericliclair/cpcli]
// problem link [https://leetcode.com/problems/longest-consecutive-sequence/]

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

class Solution
{
public:
    int longestConsecutiveSequence(vi &nums)
    {
        map<int, bool> visited;
        for (const int &n : nums)
        {
            visited[n] = false;
        }
        int maxCount = 0;

        for (const int &n : nums)
        {
            // if already visited: ignore
            if (visited[n])
                continue;
            visited[n] = true;
            int count = 1;
            int idx = n;
            // traverse right
            while (visited.find(idx + 1) != visited.end() && !visited[idx + 1])
            {
                idx++;
                visited[idx] = true;
                count++;
            }

            // traverse left
            idx = n;
            while (visited.find(idx - 1) != visited.end() && !visited[idx - 1])
            {
                idx--;
                visited[idx] = true;
                count++;
            }
            maxCount = max(count, maxCount);
        }

        return maxCount;
    }
};

int main()
{
    vi a = {1, 1, 0, 3, 7, 2, 5, 8, 4, 6, 0};
    cout << Solution().longestConsecutiveSequence(a) << endl;
    return 0;
}