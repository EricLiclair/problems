// This is template generated by CPCLI [https://github.com/ericliclair/cpcli]

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

vi getCharacterCount(string &s)
{
    vi characterCount(26, 0);

    for (const char &ch : s)
    {
        characterCount[ch - 'A']++;
    }
    return characterCount;
}

// validity, index of odd character
pair<bool, int> checkValidity(vi &characterCount)
{
    int oddCount = 0;
    int oddIdx = -1;

    for (int i = 0; i < characterCount.size(); i++)
    {
        if (characterCount[i] % 2)
        {
            // odd
            oddCount++;
            oddIdx = i;
        }
    }

    return {oddCount <= 1, oddIdx};
}

void printPalindrome(string &s, vi &characterCount, int oddIdx)
{
    const int end = s.length() - 1;
    int idx = 0;
    for (int i = 0; i < characterCount.size(); i++)
    {
        if (i == oddIdx)
            continue;
        while (characterCount[i] > 0)
        {
            s[idx] = 'A' + i;
            s[end - idx] = 'A' + i;
            characterCount[i] -= 2;
            idx++;
        }
    }

    // if odd stringlength
    if (oddIdx != -1)
    {
        while (characterCount[oddIdx] > 0)
        {
            s[idx] = 'A' + oddIdx;
            s[end - idx] = 'A' + oddIdx;
            characterCount[oddIdx] -= 2;
            idx++;
        }
    }

    cout << s << endl;
}

int main()
{
    string s;
    cin >> s;

    // get a character count array
    vi characterCount = getCharacterCount(s);

    // use the character count array to determine whether a palindromic string is possible to create or not;
    pair<bool, int> validityPair = checkValidity(characterCount);
    if (!validityPair.first)
    {
        cout << "NO SOLUTION" << endl;
    }
    else
    {
        // print a palindromic string using the character count
        printPalindrome(s, characterCount, validityPair.second);
    }
    return 0;
}