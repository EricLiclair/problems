// This is template generated by CPCLI [https://github.com/ericliclair/cpcli]
// problem link [https://leetcode.com/problems/search-a-2d-matrix/submissions/]

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

class Solution
{

private:
    int findRowIdx(vvi &matrix, int target)
    {
        int lastCol = matrix[0].size() - 1;
        int s = 0;
        int e = matrix.size() - 1;

        int rowIdx = -1;
        int mid = -1;

        while (s <= e)
        {
            mid = s + (e - s) / 2;
            if (matrix[mid][lastCol] >= target)
            {
                rowIdx = mid;
                e = mid - 1;
            }
            else
            {
                s = mid + 1;
            }
        }

        return rowIdx;
    }

    bool searchRow(vvi &matrix, int row, int target)
    {
        int s = 0;
        int e = matrix[0].size() - 1;

        int mid = -1;
        while (s <= e)
        {
            if (matrix[row][mid] == target)
            {
                return true;
            }
            else if (matrix[row][mid] < target)
            {
                s = mid + 1;
            }
            else
            {
                e = mid - 1;
            }
        }

        return false;
    }

public:
    bool searchMatrix(vector<vector<int>> &matrix, int target)
    {
        // find rowidx with last element >= target
        // search rowidx'th row for target

        int rowIdx = findRowIdx(matrix, target);

        return searchRow(matrix, rowIdx, target);
    }
};

int main()
{
    cout << "Hey champ!";
    return 0;
}