// This is template generated by CPCLI [https://github.com/ericliclair/cpcli]
// problem link []
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

// Definition for singly-linked list.
struct ListNode
{
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution
{
public:
    // return ptr to the tail after reversing k
    void *reverseInK_s(ListNode *prev, int k)
    {

        stack<ListNode *> stack;
        ListNode *ptr = prev->next;

        if (!ptr)
            return;

        while (k-- && ptr)
        {
            stack.push(ptr);
            ptr = ptr->next;
        }

        while (!stack.empty())
        {
            ListNode *top = stack.top();
            stack.pop();
            prev->next = top;
            prev = prev->next;
        }

        prev->next = ptr;
        return reverseInK_s(prev, k);
    }

    ListNode *reverseKGroup(ListNode *head, int k)
    {
        ListNode *dummy = new ListNode(-1, head);
        ListNode *ptr = dummy;
        reverseInK_s(ptr, k);
        return dummy->next;
    }
};

int main()
{
    cout << "Hey champ!";
    return 0;
}