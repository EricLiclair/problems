// This is template generated by CPCLI [https://github.com/ericliclair/cpcli]
// problem link [https://leetcode.com/problems/intersection-of-two-linked-lists/]

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;

// Definition for singly-linked list.
struct ListNode
{
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

class Solution
{
public:
    // Time: O(M + N) Space:O(M)
    ListNode *_getIntersectionNode(ListNode *headA, ListNode *headB)
    {
        map<ListNode *, bool> visited;

        while (headA)
        {
            visited[headA] = true;
            headA = headA->next;
        }

        while (headB)
        {
            if (visited.find(headB) != visited.end())
            {
                // a link exists between the two LL's
                return headB;
            }

            headB = headB->next;
        }

        return NULL;
    }

    // Time: O(M+N) Space: O(1)
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB)
    {
        ListNode *p1 = headA;
        ListNode *p2 = headB;

        while (p1 != p2)
        {
            if (p1 == NULL)
                p1 = headB;
            else
                p1 = p1->next;

            if (p2 == NULL)
                p2 = headA;
            else
                p2 = p2->next;
        }

        return p1;
    }
};
int main()
{
    cout << "Hey champ!";
    return 0;
}